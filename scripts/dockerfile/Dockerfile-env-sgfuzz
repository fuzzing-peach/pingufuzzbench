FROM ubuntu:24.04

ARG ZH_CN
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG http_proxy=${HTTP_PROXY}    
ARG https_proxy=${HTTP_PROXY}
ARG MAKE_OPT="-j4"

ENV ZH_CN=${ZH_CN}

ENV no_proxy="localhost,127.0.0.1,192.168.0.0/16,172.16.0.0/12,10.0.0.0/8"
ENV NO_PROXY=${no_proxy}

# Change the Ubuntu package mirror
RUN apt update && apt install -y apt-transport-https ca-certificates
RUN if [ "${ZH_CN}" = "true" ]; then \
        sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list.d/ubuntu.sources && \
        sed -i 's/security.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/ubuntu.sources && \
        apt clean; \
    fi

# LLVM-17
RUN apt update && apt install -y --no-install-recommends wget gnupg2 && rm -rf /var/lib/apt/lists
RUN echo deb http://apt.llvm.org/lunar/ llvm-toolchain-lunar-17 main >> /etc/apt/sources.list
RUN echo deb-src http://apt.llvm.org/lunar/ llvm-toolchain-lunar-17 main >> /etc/apt/sources.list
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -

# Install common dependencies
ENV DEBIAN_FRONTEND=noninteractive
RUN apt update -y && yes | unminimize && apt upgrade -y && \
    apt install -y \
    clang-17 llvm-17 llvm-17-dev lldb-17 lld-17 \
    apt-utils git build-essential mold curl libc++-dev sudo libtool libtool-bin libz-dev libglib2.0-dev graphviz-dev bison flex automake libpixman-1-dev cgroup-tools \
    cmake bear autoconf pkg-config gdb strace \
    openssh-server openssl libssl-dev libgnutls28-dev \
    libcap-dev libpcap-dev tcpdump \
    rsync autopoint gperf texinfo gettext \
    vim nano screen htop man wget httpie bash-completion ripgrep iputils-ping iproute2 telnet net-tools ncat netcat-traditional \
    && rm -rf /var/lib/apt/lists

RUN ln -sf /usr/bin/clang-17 /usr/bin/clang && \
    ln -sf /usr/bin/clang++-17 /usr/bin/clang++ && \
    ln -sf /usr/bin/llvm-config-17 /usr/bin/llvm-config && \
    ln -sf /usr/bin/llvm-link-17 /usr/bin/llvm-link && \
    ln -sf /usr/bin/opt-17 /usr/bin/opt && \
    ln -sf /usr/bin/llvm-dis-17 /usr/bin/llvm-dis

RUN if [ "${ZH_CN}" = "true" ]; then \
        pip3 install --break-system-packages -i https://mirrors.aliyun.com/pypi/simple gcovr wllvm; \
    else \
        pip3 install --break-system-packages gcovr wllvm; \
    fi

RUN chmod 777 /tmp

RUN if [ "${HTTP_PROXY}" != "" ]; then \
        echo "Acquire::http::Proxy \"${HTTP_PROXY}\";" > /etc/apt/apt.conf.d/99proxy && \
        echo "Acquire::ftp::Proxy \"${HTTP_PROXY}\";" >> /etc/apt/apt.conf.d/99proxy && \
        echo "Acquire::https::Proxy \"${HTTP_PROXY}\";" >> /etc/apt/apt.conf.d/99proxy; \
    fi

# Users
##############
# Add a new user
ARG USER_ID=1000
ARG GROUP_ID=1000
ENV USER_ID=${USER_ID}
ENV GROUP_ID=${GROUP_ID}

# ubuntu:23.04 has an 'ubuntu' user and group
# so we use the 'user' as the default
# to avoid the conflict between ${USER_ID} and the id of 'ubuntu'
# here we remove the existed user 'ubuntu'
RUN userdel $(getent passwd ${USER_ID} | cut -d: -f1) || true
RUN groupdel $(getent group ${GROUP_ID} | cut -d: -f1) || true
RUN groupadd -g ${GROUP_ID} user && \
    useradd -u ${USER_ID} -rm -d /home/user -s /usr/bin/bash -g user -G sudo user -p "$(openssl passwd -1 user)" && \
    echo "user ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Use user as default username
USER user
WORKDIR /home/user
ENV HOME=/home/user

RUN if [ "${ZH_CN}" = "true" ]; then \
        git config --global url."https://gh-proxy.com/github.com/".insteadOf "https://github.com/"; \
    fi

RUN git config --global http.version HTTP/1.1 && \
    git config --global user.name Kherrisan && \
    git config --global user.email zdkscope@qq.com
    
COPY patches /tmp/patches


##############
# End of user setup

# Code
##############

# Environments and fuzzer tools
##############

# AFLNet
# We need afl-replay to replay all the testcases
RUN git clone https://github.com/AFLNet/AFLNet.git aflnet && \
    cd aflnet && \
    git checkout 6d86ca0cf6852cfa7a776a77fb7886d8bee46c14 && \
    git apply /tmp/patches/aflnet.patch && \
    make clean all ${MAKE_OPT} && \
    cd llvm_mode && make ${MAKE_OPT}

# SGFuzz
RUN git clone https://github.com/bajinsheng/SGFuzz.git --depth=2 sgfuzz && \
    cd sgfuzz && \
    git checkout 00dbbd70ba79f1bcff3f7dfdb4fda0645cf91225 && \
    git apply /tmp/patches/sgfuzz.patch && \
    ./build.sh && \
    sudo cp libsfuzzer.a /usr/lib/libsFuzzer.a

# Install hongfuzz netdrive that is used by SGFuzz
RUN git clone https://github.com/google/honggfuzz.git --depth=1 && \
    cd honggfuzz && \
    git apply /tmp/patches/hf.patch && \
    CC=clang CFLAGS="-fsanitize=fuzzer-no-link -fsanitize=address" make libhfcommon/libhfcommon.a && \
    CC=clang CFLAGS="-fsanitize=fuzzer-no-link -fsanitize=address -DHFND_RECVTIME=1 -Wno-error=unused-function" make libhfnetdriver/libhfnetdriver.a && \
    sudo mv libhfcommon/libhfcommon.a /usr/lib/libhfcommon.a && \
    sudo mv libhfnetdriver/libhfnetdriver.a /usr/lib/libhfnetdriver.a

# Build sgfuzz-llvm-pass
RUN git clone https://github.com/Kherrisan/sgfuzz-llvm-pass.git && \
    cd sgfuzz-llvm-pass && \
    make

# Build libgcov_preload.so
COPY scripts/gcov_preload.c gcov_preload.c
RUN gcc -shared -fpic gcov_preload.c -g -o libgcov_preload.so && \
    sudo touch "/etc/ld.so.conf.d/gcov.conf" && \
    echo "${HOME}" | sudo tee "/etc/ld.so.conf.d/gcov.conf" && \
    sudo ldconfig

# Build libfake_random.so
COPY scripts/fake_random.c fake_random.c
RUN gcc -shared -fpic fake_random.c -g -o libfake_random.so && \
    sudo touch "/etc/ld.so.conf.d/fake_random.conf" && \
    echo "${HOME}" | sudo tee "/etc/ld.so.conf.d/fake_random.conf" && \
    sudo ldconfig

# Disable ASLR fowever
RUN echo "kernel.randomize_va_space = 0" | sudo tee -a /etc/sysctl.d/01-disable-aslr.conf && \
    sudo sysctl -p /etc/sysctl.d/01-disable-aslr.conf