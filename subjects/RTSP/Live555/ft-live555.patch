diff --git a/liveMedia/GenericMediaServer.cpp b/liveMedia/GenericMediaServer.cpp
index 332ac2b..307bf61 100644
--- a/liveMedia/GenericMediaServer.cpp
+++ b/liveMedia/GenericMediaServer.cpp
@@ -394,6 +394,16 @@ GenericMediaServer::ClientSession* GenericMediaServer::createNewClientSessionWit
   u_int32_t sessionId;
   char sessionIdStr[8+1];
 
+#if (defined(FT_FUZZING) || defined(SGFUZZ)) && ! defined(FT_UNPATCHED_SESSION_ID)
+    sessionId = (u_int32_t)1234;
+    snprintf(sessionIdStr, sizeof sessionIdStr, "%08X", sessionId);
+    fPreviousClientSessionId = 1234;
+
+  ClientSession* clientSession = createNewClientSession(sessionId);
+  if (clientSession != NULL) fClientSessions->Add(sessionIdStr, clientSession);
+
+  return clientSession;
+#else
   // Choose a random (unused) 32-bit integer for the session id
   // (it will be encoded as a 8-digit hex number).  (We avoid choosing session id 0,
   // because that has a special use by some servers.  Similarly, we avoid choosing the same
@@ -409,6 +419,7 @@ GenericMediaServer::ClientSession* GenericMediaServer::createNewClientSessionWit
   if (clientSession != NULL) fClientSessions->Add(sessionIdStr, clientSession);
 
   return clientSession;
+#endif
 }
 
 GenericMediaServer::ClientSession*
diff --git a/testProgs/testOnDemandRTSPServer.cpp b/testProgs/testOnDemandRTSPServer.cpp
index 131c21e..86b3f15 100644
--- a/testProgs/testOnDemandRTSPServer.cpp
+++ b/testProgs/testOnDemandRTSPServer.cpp
@@ -18,12 +18,13 @@ along with this library; if not, write to the Free Software Foundation, Inc.,
 // - various kinds of file on demand, using a built-in RTSP server.
 // main program
 
+#include <unistd.h>
 #include "liveMedia.hh"
 
 #include "BasicUsageEnvironment.hh"
 #include "announceURL.hh"
 
-UsageEnvironment* env;
+UsageEnvironment *env;
 
 // To make the second and subsequent client for each stream reuse the same
 // input stream as the first client (rather than playing the file from the
@@ -35,30 +36,105 @@ Boolean reuseFirstSource = False;
 // change the following "False" to "True":
 Boolean iFramesOnly = False;
 
-static void announceStream(RTSPServer* rtspServer, ServerMediaSession* sms,
-			   char const* streamName, char const* inputFileName); // forward
+int standardPort = 8554;
+int tlsPort = 322;
+
+char eventLoopWatchVariable = 0;
+
+static void announceStream(RTSPServer *rtspServer, ServerMediaSession *sms,
+                           char const *streamName, char const *inputFileName); // forward
 
 static char newDemuxWatchVariable;
 
-static MatroskaFileServerDemux* matroskaDemux;
-static void onMatroskaDemuxCreation(MatroskaFileServerDemux* newDemux, void* /*clientData*/) {
+static MatroskaFileServerDemux *matroskaDemux;
+static void onMatroskaDemuxCreation(MatroskaFileServerDemux *newDemux, void * /*clientData*/)
+{
   matroskaDemux = newDemux;
   newDemuxWatchVariable = 1;
 }
 
-static OggFileServerDemux* oggDemux;
-static void onOggDemuxCreation(OggFileServerDemux* newDemux, void* /*clientData*/) {
+static OggFileServerDemux *oggDemux;
+static void onOggDemuxCreation(OggFileServerDemux *newDemux, void * /*clientData*/)
+{
   oggDemux = newDemux;
   newDemuxWatchVariable = 1;
 }
 
-int main(int argc, char** argv) {
+struct OneShotRTSPServer : public RTSPServer
+{
+
+  static RTSPServer* createNew(UsageEnvironment& env, Port ourPort = 554,
+			       UserAuthenticationDatabase* authDatabase = NULL,
+			       unsigned reclamationSeconds = 65);
+
+  OneShotRTSPServer(UsageEnvironment &env,
+                    int ourSocketIPv4, int ourSocketIPv6, Port ourPort,
+                    UserAuthenticationDatabase *authDatabase,
+                    unsigned reclamationSeconds)
+      : RTSPServer(env, ourSocketIPv4, ourSocketIPv6, ourPort, authDatabase, reclamationSeconds)
+  {
+  }
+
+  class OneShotRTSPClientSession : public RTSPServer::RTSPClientSession
+  {
+    friend OneShotRTSPServer;
+
+    OneShotRTSPClientSession(RTSPServer& ourServer, u_int32_t sessionId) : RTSPServer::RTSPClientSession(ourServer, sessionId) { }
+
+    void handleCmd_TEARDOWN(RTSPServer::RTSPClientConnection *ourClientConnection,
+                            ServerMediaSubsession *subsession)
+    {
+      RTSPServer::RTSPClientSession::handleCmd_TEARDOWN(ourClientConnection, subsession);
+      stopEventLoop();
+    }
+  };
+  
+  GenericMediaServer::ClientSession* createNewClientSession(u_int32_t sessionId)
+  {
+    return new OneShotRTSPClientSession(*this, sessionId);
+  }
+
+static void stopEventLoop() {
+  eventLoopWatchVariable = 1;
+}
+
+};
+
+RTSPServer* OneShotRTSPServer::createNew(UsageEnvironment &env, Port ourPort,
+                             UserAuthenticationDatabase *authDatabase,
+                             unsigned reclamationSeconds)
+{
+  int ourSocketIPv4 = setUpOurSocket(env, ourPort, AF_INET);
+  int ourSocketIPv6 = setUpOurSocket(env, ourPort, AF_INET6);
+  if (ourSocketIPv4 < 0 && ourSocketIPv6 < 0)
+    return NULL;
+
+  return new OneShotRTSPServer(env, ourSocketIPv4, ourSocketIPv6, ourPort, authDatabase, reclamationSeconds);
+}
+
+#ifdef SGFUZZ
+extern "C" int HonggfuzzNetDriver_main(int argc, char ** argv)
+#else
+int main(int argc, char ** argv)
+#endif
+{
   // Begin by setting up our usage environment:
-  TaskScheduler* scheduler = BasicTaskScheduler::createNew();
+  TaskScheduler *scheduler = BasicTaskScheduler::createNew();
   env = BasicUsageEnvironment::createNew(*scheduler);
 
-  UserAuthenticationDatabase* authDB = NULL;
+  UserAuthenticationDatabase *authDB = NULL;
+  int port = 8554;
+
+  int opt;
+  while ((opt = getopt(argc, argv, "p:")) != -1) {
+    switch(opt) {
+      case 'p':
+        port = atoi(optarg);
+    }
+  }
+
 #ifdef ACCESS_CONTROL
+  printf("using ac");
   // To implement client access control to the RTSP server, do the following:
   authDB = new UserAuthenticationDatabase;
   authDB->addUserRecord("username1", "password1"); // replace these with real strings
@@ -66,15 +142,17 @@ int main(int argc, char** argv) {
   // access to the server.
 #endif
 
-  // Create the RTSP server:
 #ifdef SERVER_USE_TLS
   // Serve RTSPS: RTSP over a TLS connection:
-  RTSPServer* rtspServer = RTSPServer::createNew(*env, 322, authDB);
+  RTSPServer *rtspServer = RTSPServer::createNew(*env, port, authDB);
 #else
   // Serve regular RTSP (over a TCP connection):
-  RTSPServer* rtspServer = RTSPServer::createNew(*env, 8554, authDB);
+  RTSPServer *rtspServer = OneShotRTSPServer::createNew(*env, port, authDB);
 #endif
-  if (rtspServer == NULL) {
+
+
+  if (rtspServer == NULL)
+  {
     *env << "Failed to create RTSP server: " << env->getResultMsg() << "\n";
     exit(1);
   }
@@ -83,11 +161,10 @@ int main(int argc, char** argv) {
 #define STREAM_USING_SRTP True
 #endif
   rtspServer->setTLSState(PATHNAME_TO_CERTIFICATE_FILE, PATHNAME_TO_PRIVATE_KEY_FILE,
-			  STREAM_USING_SRTP);
+                          STREAM_USING_SRTP);
 #endif
 
-  char const* descriptionString
-    = "Session streamed by \"testOnDemandRTSPServer\"";
+  char const *descriptionString = "Session streamed by \"testOnDemandRTSPServer\"";
 
   // Set up each of the possible streams that can be served by the
   // RTSP server.  Each such stream is implemented using a
@@ -96,13 +173,11 @@ int main(int argc, char** argv) {
 
   // A MPEG-4 video elementary stream:
   {
-    char const* streamName = "mpeg4ESVideoTest";
-    char const* inputFileName = "test.m4e";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(MPEG4VideoFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource));
+    char const *streamName = "mpeg4ESVideoTest";
+    char const *inputFileName = "test.m4e";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(MPEG4VideoFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -110,13 +185,11 @@ int main(int argc, char** argv) {
 
   // A H.264 video elementary stream:
   {
-    char const* streamName = "h264ESVideoTest";
-    char const* inputFileName = "test.264";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(H264VideoFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource));
+    char const *streamName = "h264ESVideoTest";
+    char const *inputFileName = "test.264";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(H264VideoFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -124,13 +197,11 @@ int main(int argc, char** argv) {
 
   // A H.265 video elementary stream:
   {
-    char const* streamName = "h265ESVideoTest";
-    char const* inputFileName = "test.265";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(H265VideoFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource));
+    char const *streamName = "h265ESVideoTest";
+    char const *inputFileName = "test.265";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(H265VideoFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -138,14 +209,12 @@ int main(int argc, char** argv) {
 
   // A MPEG-1 or 2 audio+video program stream:
   {
-    char const* streamName = "mpeg1or2AudioVideoTest";
-    char const* inputFileName = "test.mpg";
+    char const *streamName = "mpeg1or2AudioVideoTest";
+    char const *inputFileName = "test.mpg";
     // NOTE: This *must* be a Program Stream; not an Elementary Stream
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    MPEG1or2FileServerDemux* demux
-      = MPEG1or2FileServerDemux::createNew(*env, inputFileName, reuseFirstSource);
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    MPEG1or2FileServerDemux *demux = MPEG1or2FileServerDemux::createNew(*env, inputFileName, reuseFirstSource);
     sms->addSubsession(demux->newVideoServerMediaSubsession(iFramesOnly));
     sms->addSubsession(demux->newAudioServerMediaSubsession());
     rtspServer->addServerMediaSession(sms);
@@ -155,14 +224,12 @@ int main(int argc, char** argv) {
 
   // A MPEG-1 or 2 video elementary stream:
   {
-    char const* streamName = "mpeg1or2ESVideoTest";
-    char const* inputFileName = "testv.mpg";
+    char const *streamName = "mpeg1or2ESVideoTest";
+    char const *inputFileName = "testv.mpg";
     // NOTE: This *must* be a Video Elementary Stream; not a Program Stream
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(MPEG1or2VideoFileServerMediaSubsession
-	       ::createNew(*env, inputFileName, reuseFirstSource, iFramesOnly));
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(MPEG1or2VideoFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource, iFramesOnly));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -170,31 +237,28 @@ int main(int argc, char** argv) {
 
   // A MP3 audio stream (actually, any MPEG-1 or 2 audio file will work):
   // To stream using 'ADUs' rather than raw MP3 frames, uncomment the following:
-//#define STREAM_USING_ADUS 1
-  // To also reorder ADUs before streaming, uncomment the following:
-//#define INTERLEAVE_ADUS 1
-  // (For more information about ADUs and interleaving,
-  //  see <http://www.live555.com/rtp-mp3/>)
+  // #define STREAM_USING_ADUS 1
+  //  To also reorder ADUs before streaming, uncomment the following:
+  // #define INTERLEAVE_ADUS 1
+  //  (For more information about ADUs and interleaving,
+  //   see <http://www.live555.com/rtp-mp3/>)
   {
-    char const* streamName = "mp3AudioTest";
-    char const* inputFileName = "test.mp3";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "mp3AudioTest";
+    char const *inputFileName = "/home/user/fuzztruction/fuzztruction-experiments/comparison-with-state-of-the-art/binaries/networked/live555/inputs/test.mp3";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
     Boolean useADUs = False;
-    Interleaving* interleaving = NULL;
+    Interleaving *interleaving = NULL;
 #ifdef STREAM_USING_ADUS
     useADUs = True;
 #ifdef INTERLEAVE_ADUS
-    unsigned char interleaveCycle[] = {0,2,1,3}; // or choose your own...
-    unsigned const interleaveCycleSize
-      = (sizeof interleaveCycle)/(sizeof (unsigned char));
+    unsigned char interleaveCycle[] = {0, 2, 1, 3}; // or choose your own...
+    unsigned const interleaveCycleSize = (sizeof interleaveCycle) / (sizeof(unsigned char));
     interleaving = new Interleaving(interleaveCycleSize, interleaveCycle);
 #endif
 #endif
-    sms->addSubsession(MP3AudioFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource,
-				   useADUs, interleaving));
+    sms->addSubsession(MP3AudioFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource,
+                                                                     useADUs, interleaving));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -202,16 +266,14 @@ int main(int argc, char** argv) {
 
   // A WAV audio stream:
   {
-    char const* streamName = "wavAudioTest";
-    char const* inputFileName = "test.wav";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "wavAudioTest";
+    char const *inputFileName = "test.wav";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
     // To convert 16-bit PCM data to 8-bit u-law, prior to streaming,
     // change the following to True:
     Boolean convertToULaw = False;
-    sms->addSubsession(WAVAudioFileServerMediaSubsession
-	       ::createNew(*env, inputFileName, reuseFirstSource, convertToULaw));
+    sms->addSubsession(WAVAudioFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource, convertToULaw));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -219,13 +281,11 @@ int main(int argc, char** argv) {
 
   // An AMR audio stream:
   {
-    char const* streamName = "amrAudioTest";
-    char const* inputFileName = "test.amr";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(AMRAudioFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource));
+    char const *streamName = "amrAudioTest";
+    char const *inputFileName = "test.amr";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(AMRAudioFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -233,14 +293,12 @@ int main(int argc, char** argv) {
 
   // A 'VOB' file (e.g., from an unencrypted DVD):
   {
-    char const* streamName = "vobTest";
-    char const* inputFileName = "test.vob";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "vobTest";
+    char const *inputFileName = "test.vob";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
     // Note: VOB files are MPEG-2 Program Stream files, but using AC-3 audio
-    MPEG1or2FileServerDemux* demux
-      = MPEG1or2FileServerDemux::createNew(*env, inputFileName, reuseFirstSource);
+    MPEG1or2FileServerDemux *demux = MPEG1or2FileServerDemux::createNew(*env, inputFileName, reuseFirstSource);
     sms->addSubsession(demux->newVideoServerMediaSubsession(iFramesOnly));
     sms->addSubsession(demux->newAC3AudioServerMediaSubsession());
     rtspServer->addServerMediaSession(sms);
@@ -250,14 +308,12 @@ int main(int argc, char** argv) {
 
   // A MPEG-2 Transport Stream:
   {
-    char const* streamName = "mpeg2TransportStreamTest";
-    char const* inputFileName = "test.ts";
-    char const* indexFileName = "test.tsx";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(MPEG2TransportFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, indexFileName, reuseFirstSource));
+    char const *streamName = "mpeg2TransportStreamTest";
+    char const *inputFileName = "test.ts";
+    char const *indexFileName = "test.tsx";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(MPEG2TransportFileServerMediaSubsession ::createNew(*env, inputFileName, indexFileName, reuseFirstSource));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -265,13 +321,11 @@ int main(int argc, char** argv) {
 
   // An AAC audio stream (ADTS-format file):
   {
-    char const* streamName = "aacAudioTest";
-    char const* inputFileName = "test.aac";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(ADTSAudioFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource));
+    char const *streamName = "aacAudioTest";
+    char const *inputFileName = "test.aac";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(ADTSAudioFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -280,15 +334,13 @@ int main(int argc, char** argv) {
   // A DV video stream:
   {
     // First, make sure that the RTPSinks' buffers will be large enough to handle the huge size of DV frames (as big as 288000).
-    OutPacketBuffer::maxSize = 2000000;
-
-    char const* streamName = "dvVideoTest";
-    char const* inputFileName = "test.dv";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(DVVideoFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource));
+    OutPacketBuffer::maxSize = 300000;
+
+    char const *streamName = "dvVideoTest";
+    char const *inputFileName = "test.dv";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(DVVideoFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource));
     rtspServer->addServerMediaSession(sms);
 
     announceStream(rtspServer, sms, streamName, inputFileName);
@@ -296,14 +348,12 @@ int main(int argc, char** argv) {
 
   // A AC3 video elementary stream:
   {
-    char const* streamName = "ac3AudioTest";
-    char const* inputFileName = "test.ac3";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "ac3AudioTest";
+    char const *inputFileName = "test.ac3";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
 
-    sms->addSubsession(AC3AudioFileServerMediaSubsession
-		       ::createNew(*env, inputFileName, reuseFirstSource));
+    sms->addSubsession(AC3AudioFileServerMediaSubsession ::createNew(*env, inputFileName, reuseFirstSource));
 
     rtspServer->addServerMediaSession(sms);
 
@@ -312,23 +362,24 @@ int main(int argc, char** argv) {
 
   // A Matroska ('.mkv') file, with video+audio+subtitle streams:
   {
-    char const* streamName = "matroskaFileTest";
-    char const* inputFileName = "test.mkv";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "matroskaFileTest";
+    char const *inputFileName = "test.mkv";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
 
     newDemuxWatchVariable = 0;
     MatroskaFileServerDemux::createNew(*env, inputFileName, onMatroskaDemuxCreation, NULL);
     env->taskScheduler().doEventLoop(&newDemuxWatchVariable);
 
     Boolean sessionHasTracks = False;
-    ServerMediaSubsession* smss;
-    while ((smss = matroskaDemux->newServerMediaSubsession()) != NULL) {
+    ServerMediaSubsession *smss;
+    while ((smss = matroskaDemux->newServerMediaSubsession()) != NULL)
+    {
       sms->addSubsession(smss);
       sessionHasTracks = True;
     }
-    if (sessionHasTracks) {
+    if (sessionHasTracks)
+    {
       rtspServer->addServerMediaSession(sms);
     }
     // otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
@@ -339,23 +390,24 @@ int main(int argc, char** argv) {
   // A WebM ('.webm') file, with video(VP8)+audio(Vorbis) streams:
   // (Note: ".webm' files are special types of Matroska files, so we use the same code as the Matroska ('.mkv') file code above.)
   {
-    char const* streamName = "webmFileTest";
-    char const* inputFileName = "test.webm";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "webmFileTest";
+    char const *inputFileName = "test.webm";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
 
     newDemuxWatchVariable = 0;
     MatroskaFileServerDemux::createNew(*env, inputFileName, onMatroskaDemuxCreation, NULL);
     env->taskScheduler().doEventLoop(&newDemuxWatchVariable);
 
     Boolean sessionHasTracks = False;
-    ServerMediaSubsession* smss;
-    while ((smss = matroskaDemux->newServerMediaSubsession()) != NULL) {
+    ServerMediaSubsession *smss;
+    while ((smss = matroskaDemux->newServerMediaSubsession()) != NULL)
+    {
       sms->addSubsession(smss);
       sessionHasTracks = True;
     }
-    if (sessionHasTracks) {
+    if (sessionHasTracks)
+    {
       rtspServer->addServerMediaSession(sms);
     }
     // otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
@@ -365,23 +417,24 @@ int main(int argc, char** argv) {
 
   // An Ogg ('.ogg') file, with video and/or audio streams:
   {
-    char const* streamName = "oggFileTest";
-    char const* inputFileName = "test.ogg";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "oggFileTest";
+    char const *inputFileName = "test.ogg";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
 
     newDemuxWatchVariable = 0;
     OggFileServerDemux::createNew(*env, inputFileName, onOggDemuxCreation, NULL);
     env->taskScheduler().doEventLoop(&newDemuxWatchVariable);
 
     Boolean sessionHasTracks = False;
-    ServerMediaSubsession* smss;
-    while ((smss = oggDemux->newServerMediaSubsession()) != NULL) {
+    ServerMediaSubsession *smss;
+    while ((smss = oggDemux->newServerMediaSubsession()) != NULL)
+    {
       sms->addSubsession(smss);
       sessionHasTracks = True;
     }
-    if (sessionHasTracks) {
+    if (sessionHasTracks)
+    {
       rtspServer->addServerMediaSession(sms);
     }
     // otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
@@ -392,23 +445,24 @@ int main(int argc, char** argv) {
   // An Opus ('.opus') audio file:
   // (Note: ".opus' files are special types of Ogg files, so we use the same code as the Ogg ('.ogg') file code above.)
   {
-    char const* streamName = "opusFileTest";
-    char const* inputFileName = "test.opus";
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
+    char const *streamName = "opusFileTest";
+    char const *inputFileName = "test.opus";
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
 
     newDemuxWatchVariable = 0;
     OggFileServerDemux::createNew(*env, inputFileName, onOggDemuxCreation, NULL);
     env->taskScheduler().doEventLoop(&newDemuxWatchVariable);
 
     Boolean sessionHasTracks = False;
-    ServerMediaSubsession* smss;
-    while ((smss = oggDemux->newServerMediaSubsession()) != NULL) {
+    ServerMediaSubsession *smss;
+    while ((smss = oggDemux->newServerMediaSubsession()) != NULL)
+    {
       sms->addSubsession(smss);
       sessionHasTracks = True;
     }
-    if (sessionHasTracks) {
+    if (sessionHasTracks)
+    {
       rtspServer->addServerMediaSession(sms);
     }
     // otherwise, because the stream has no tracks, we don't add a ServerMediaSession to the server.
@@ -418,24 +472,25 @@ int main(int argc, char** argv) {
 
   // A MPEG-2 Transport Stream, coming from a live UDP (raw-UDP or RTP/UDP) source:
   {
-    char const* streamName = "mpeg2TransportStreamFromUDPSourceTest";
-    char const* inputAddressStr = "239.255.42.42";
-        // This causes the server to take its input from the stream sent by the "testMPEG2TransportStreamer" demo application.
-        // (Note: If the input UDP source is unicast rather than multicast, then change this to NULL.)
+    char const *streamName = "mpeg2TransportStreamFromUDPSourceTest";
+    char const *inputAddressStr = "239.255.42.42";
+    // This causes the server to take its input from the stream sent by the "testMPEG2TransportStreamer" demo application.
+    // (Note: If the input UDP source is unicast rather than multicast, then change this to NULL.)
     portNumBits const inputPortNum = 1234;
-        // This causes the server to take its input from the stream sent by the "testMPEG2TransportStreamer" demo application.
-    Boolean const inputStreamIsRawUDP = False; 
-    ServerMediaSession* sms
-      = ServerMediaSession::createNew(*env, streamName, streamName,
-				      descriptionString);
-    sms->addSubsession(MPEG2TransportUDPServerMediaSubsession
-		       ::createNew(*env, inputAddressStr, inputPortNum, inputStreamIsRawUDP));
+    // This causes the server to take its input from the stream sent by the "testMPEG2TransportStreamer" demo application.
+    Boolean const inputStreamIsRawUDP = False;
+    ServerMediaSession *sms = ServerMediaSession::createNew(*env, streamName, streamName,
+                                                            descriptionString);
+    sms->addSubsession(MPEG2TransportUDPServerMediaSubsession ::createNew(*env, inputAddressStr, inputPortNum, inputStreamIsRawUDP));
     rtspServer->addServerMediaSession(sms);
 
     *env << "\n\"" << streamName << "\" stream, from a UDP Transport Stream input source \n\t(";
-    if (inputAddressStr != NULL) {
+    if (inputAddressStr != NULL)
+    {
       *env << "IP multicast address " << inputAddressStr << ",";
-    } else {
+    }
+    else
+    {
       *env << "unicast;";
     }
     *env << " port " << inputPortNum << ")\n";
@@ -448,25 +503,30 @@ int main(int argc, char** argv) {
 
 #ifdef SERVER_USE_TLS
   // (Attempt to) use the default HTTPS port (443) instead:
-  char const* httpProtocolStr = "HTTPS";
-  if (rtspServer->setUpTunnelingOverHTTP(443)) {
+  char const *httpProtocolStr = "HTTPS";
+  if (rtspServer->setUpTunnelingOverHTTP(443))
+  {
 #else
-  char const* httpProtocolStr = "HTTP";
-  if (rtspServer->setUpTunnelingOverHTTP(80) || rtspServer->setUpTunnelingOverHTTP(8000) || rtspServer->setUpTunnelingOverHTTP(8080)) {
+  char const *httpProtocolStr = "HTTP";
+  if (rtspServer->setUpTunnelingOverHTTP(80) || rtspServer->setUpTunnelingOverHTTP(8000) || rtspServer->setUpTunnelingOverHTTP(8080))
+  {
 #endif
     *env << "\n(We use port " << rtspServer->httpServerPortNum() << " for optional RTSP-over-" << httpProtocolStr << " tunneling.)\n";
-  } else {
+  }
+  else
+  {
     *env << "\n(RTSP-over-" << httpProtocolStr << " tunneling is not available.)\n";
   }
 
-  env->taskScheduler().doEventLoop(); // does not return
+  env->taskScheduler().doEventLoop(&eventLoopWatchVariable); // does not return
 
   return 0; // only to prevent compiler warning
 }
 
-static void announceStream(RTSPServer* rtspServer, ServerMediaSession* sms,
-			   char const* streamName, char const* inputFileName) {
-  UsageEnvironment& env = rtspServer->envir();
+static void announceStream(RTSPServer *rtspServer, ServerMediaSession *sms,
+                           char const *streamName, char const *inputFileName)
+{
+  UsageEnvironment &env = rtspServer->envir();
 
   env << "\n\"" << streamName << "\" stream, from the file \""
       << inputFileName << "\"\n";
diff --git a/testProgs/testRTSPClient.cpp b/testProgs/testRTSPClient.cpp
index 64b8fb1..c7387d5 100644
--- a/testProgs/testRTSPClient.cpp
+++ b/testProgs/testRTSPClient.cpp
@@ -325,8 +325,8 @@ void continueAfterPLAY(RTSPClient* rtspClient, int resultCode, char* resultStrin
     // 'seek' back within it and do another RTSP "PLAY" - then you can omit this code.
     // (Alternatively, if you don't want to receive the entire stream, you could set this timer for some shorter value.)
     if (scs.duration > 0) {
-      unsigned const delaySlop = 2; // number of seconds extra to delay, after the stream's expected duration.  (This is optional.)
-      scs.duration += delaySlop;
+    //   unsigned const delaySlop = 2; // number of seconds extra to delay, after the stream's expected duration.  (This is optional.)
+    //   scs.duration += delaySlop;
       unsigned uSecsToDelay = (unsigned)(scs.duration*1000000);
       scs.streamTimerTask = env.taskScheduler().scheduleDelayedTask(uSecsToDelay, (TaskFunc*)streamTimerHandler, rtspClient);
     }
